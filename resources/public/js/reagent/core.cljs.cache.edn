;; Analyzed by ClojureScript 1.7.170
{:use-macros {dbg reagent.debug, prn reagent.debug}, :excludes #{atom flush partial}, :name reagent.core, :imports nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.ratom reagent.ratom, reagent.impl.template reagent.impl.template, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, tmpl reagent.impl.template, ratom reagent.ratom, batch reagent.impl.batching}, :uses nil, :defs {current-component {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 61, :column 7, :end-line 61, :end-column 24, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function."}, :name reagent.core/current-component, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function."}, as-component {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React component. Returns form unchanged if it is not a vector."}, :name reagent.core/as-component, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 19, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React component. Returns form unchanged if it is not a vector."}, atom {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 131, :column 7, :end-line 131, :end-column 11, :arglists (quote ([x] [x & rest])), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & rest]), :arglists-meta (nil nil)}}, :name reagent.core/atom, :variadic true, :file "resources/public/js/reagent/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & rest]), :arglists-meta (nil nil)}, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists ([x] [x & rest]), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered."}, merge-props {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 113, :column 7, :end-line 113, :end-column 18, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo."}, :name reagent.core/merge-props, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 18, :method-params ([defaults props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo."}, next-tick {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 141, :column 7, :end-line 141, :end-column 16, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent."}, :name reagent.core/next-tick, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent."}, props {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 89, :column 7, :end-line 89, :end-column 12, :arglists (quote ([this])), :doc "Returns the props passed to a component."}, :name reagent.core/props, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the props passed to a component."}, flush {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 119, :column 7, :end-line 119, :end-column 12, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there."}, :name reagent.core/flush, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there."}, children {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 95, :column 7, :end-line 95, :end-column 15, :arglists (quote ([this])), :doc "Returns the children passed to a component."}, :name reagent.core/children, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the children passed to a component."}, unmount-component-at-node {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 32, :column 7, :end-line 32, :end-column 32, :arglists (quote ([container])), :doc "Remove a component from the given DOM node."}, :name reagent.core/unmount-component-at-node, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :doc "Remove a component from the given DOM node."}, render-component {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 20, :column 7, :end-line 20, :end-column 23, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be either a\nvector (using Reagent's Hiccup syntax), or a React component. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}}, :name reagent.core/render-component, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([comp container] [comp container callback]), :arglists ([comp container] [comp container callback]), :arglists-meta (nil nil)}, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists ([comp container] [comp container callback]), :doc "Render a Reagent component into the DOM. The first argument may be either a\nvector (using Reagent's Hiccup syntax), or a React component. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance."}, state {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 68, :column 7, :end-line 68, :end-column 12, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state."}, :name reagent.core/state, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state."}, render-component-to-string {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 37, :column 7, :end-line 37, :end-column 33, :arglists (quote ([component])), :doc "Turns a component into an HTML string."}, :name reagent.core/render-component-to-string, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 33, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string."}, dom-node {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 107, :column 7, :end-line 107, :end-column 15, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component."}, :name reagent.core/dom-node, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component."}, is-client {:name reagent.core/is-client, :file "resources/public/js/reagent/core.cljs", :line 13, :column 1, :end-line 13, :end-column 15, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 13, :column 6, :end-line 13, :end-column 15}}, replace-state {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 74, :column 7, :end-line 74, :end-column 20, :arglists (quote ([this new-state])), :doc "Set state of a component."}, :name reagent.core/replace-state, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 20, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set state of a component."}, partial {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 146, :column 7, :end-line 146, :end-column 14, :arglists (quote ([f & args])), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :name reagent.core/partial, :variadic true, :file "resources/public/js/reagent/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists ([f & args]), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with ="}, set-state {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 81, :column 7, :end-line 81, :end-column 16, :arglists (quote ([this new-state])), :doc "Merge component state with new-state."}, :name reagent.core/set-state, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 16, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Merge component state with new-state."}, argv {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component."}, :name reagent.core/argv, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component."}, React {:name reagent.core/React, :file "resources/public/js/reagent/core.cljs", :line 11, :column 1, :end-line 11, :end-column 11, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 11, :column 6, :end-line 11, :end-column 11}}, create-class {:protocol-inline nil, :meta {:file "/Users/akuttruff/cljs_weather_updater/resources/public/js/reagent/core.cljs", :line 42, :column 7, :end-line 42, :end-column 19, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:render (fn [this])}\n\nEverything is optional, except :render.\n"}, :name reagent.core/create-class, :variadic false, :file "resources/public/js/reagent/core.cljs", :end-column 19, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:render (fn [this])}\n\nEverything is optional, except :render.\n"}}, :require-macros {reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{map? new-state util/reagent-component? this or nil?}, :order [util/reagent-component? this or nil? new-state map?]}, :doc nil}